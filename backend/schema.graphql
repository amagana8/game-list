type User @exclude(operations: [CREATE, DELETE]) {
  id: ID! @id @auth(rules: [{ allow: { id: "$jwt.sub" } }])
  username: String! @unique @readonly
  email: String! @unique @readonly @auth(rules: [{ allow: { id: "$jwt.sub" } }])
  password: String! @private
  createdAt: DateTime! @timestamp(operations: [CREATE])
  gameList: [Game!]!
    @relationship(type: "LISTED", properties: "ListEntry", direction: OUT)
  gameReviews: [Review!]! @relationship(type: "WROTE_REVIEW", direction: OUT)
  genreDistribution: [GenreCount!]!
    @cypher(
      statement: "MATCH (this)-[:LISTED]->(:Game)-[:IN_GENRE]->(g:Genre)  WITH g.name AS genreName, COUNT(g) AS genreAmount RETURN ({genre: genreName, amount: genreAmount})"
    )
  scoreDistribution: [ScoreCount!]!
    @cypher(
      statement: """
      MATCH (this)-[r:LISTED]->(g:Game)
      WHERE r.score IS NOT NULL
      WITH round(r.score) AS scoreValue, COUNT(r.score) AS scoreCount
      ORDER BY scoreValue
      RETURN ({score: scoreValue, amount: scoreCount})
      """
    )
}

type ScoreCount {
  score: Float!
  amount: Int!
}

type GenreCount {
  genre: String!
  amount: Int!
}

type Game @exclude(operations: [DELETE]) {
  id: ID! @id
  slug: String! @unique
  createdAt: DateTime @timestamp(operations: [CREATE])
  title: String
  cover: String
  developers: [Company!]! @relationship(type: "DEVELOPED_BY", direction: OUT)
  publishers: [Company!]! @relationship(type: "PUBLISHED_BY", direction: OUT)
  genres: [Genre!]! @relationship(type: "IN_GENRE", direction: OUT)
  summary: String
  releaseDate: DateTime
  userList: [User!]!
    @relationship(type: "LISTED", properties: "ListEntry", direction: IN)
  userReviews: [Review!]! @relationship(type: "REVIEW_OF", direction: IN)
  scoreDistribution: [ScoreCount!]!
    @cypher(
      statement: """
      MATCH (this)<-[r:LISTED]-(u:User)
      WHERE r.score IS NOT NULL
      WITH round(r.score) AS scoreValue, COUNT(r.score) AS scoreCount
      ORDER BY scoreValue
      RETURN ({score: scoreValue, amount: scoreCount})
      """
    )
}

type Company @exclude(operations: [DELETE]) {
  id: ID! @id
  name: String!
  createdAt: DateTime @timestamp(operations: [CREATE])
  gamesDeveloped: [Game!]! @relationship(type: "DEVELOPED_BY", direction: IN)
  gamesPublished: [Game!]! @relationship(type: "PUBLISHED_BY", direction: IN)
}

type Genre @exclude(operations: [DELETE]) {
  id: ID! @id
  name: String!
  createdAt: DateTime @timestamp(operations: [CREATE])
  games: [Game!]! @relationship(type: "IN_GENRE", direction: IN)
}

type Review @exclude(operations: [CONNECT, DISCONNECT]) {
  id: ID! @id
  body: String!
  summary: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
  author: User! @relationship(type: "WROTE_REVIEW", direction: IN)
  subject: Game! @relationship(type: "REVIEW_OF", direction: OUT)
}

interface ListEntry @relationshipProperties {
  status: Status
  hours: Float
  score: Float
}

enum Status {
  PLAYING
  COMPLETED
  PAUSED
  DROPPED
  PLANNING
}

type Mutation {
  signUp(username: String!, email: String!, password: String!): String!
  signIn(email: String!, password: String!): String!
  updateUserDetails(
    username: String!
    newUsername: String
    newEmail: String
  ): String!
}

type Query {
  searchUsers(query: String): [User!]!
    @cypher(
      statement: "MATCH (n:User) WHERE toLower(n.username) CONTAINS toLower($query) RETURN n LIMIT 50"
    )
  searchGames(query: String): [Game!]!
    @cypher(
      statement: "MATCH (n:Game) WHERE toLower(n.title) CONTAINS toLower($query) RETURN n LIMIT 50"
    )
  searchCompanies(query: String): [Company!]!
    @cypher(
      statement: "MATCH (c:Company) WHERE toLower(c.name) CONTAINS toLower($query) RETURN c LIMIT 50"
    )
}

extend type Game
  @auth(rules: [{ operations: [CREATE, UPDATE], isAuthenticated: true }])

extend type Company
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, CONNECT, DISCONNECT]
        isAuthenticated: true
      }
    ]
  )

extend type Genre
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, CONNECT, DISCONNECT]
        isAuthenticated: true
      }
    ]
  )

extend type User
  @auth(
    rules: [
      { operations: [UPDATE, CONNECT, DISCONNECT], allow: { id: "$jwt.sub" } }
    ]
  )

extend type Review
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE]
        allow: { author: { id: "$jwt.sub" } }
      }
    ]
  )
