type User @exclude(operations: [CREATE, DELETE]) {
  id: ID! @id @auth(rules: [{ allow: { id: "$jwt.sub" } }])
  username: String! @unique @readonly
  email: String! @unique @readonly @auth(rules: [{ allow: { id: "$jwt.sub" } }])
  password: String! @private
  createdAt: DateTime! @timestamp(operations: [CREATE])
  gameList: [Game!]!
    @relationship(type: "LISTED", properties: "ListEntry", direction: OUT)
  gameReviews: [Review!]! @relationship(type: "WROTE_REVIEW", direction: OUT)
}

type Game @exclude(operations: [DELETE]) {
  id: ID! @id
  slug: String! @unique
  title: String
  cover: String
  developers: [String!]!
  publishers: [String!]!
  genre: Genre
  summary: String
  releaseDate: Date
  userList: [User!]!
    @relationship(type: "LISTED", properties: "ListEntry", direction: IN)
  userReviews: [Review!]! @relationship(type: "REVIEW_OF", direction: IN)
}

type Review @exclude(operations: [CONNECT, DISCONNECT]) {
  id: ID! @id
  body: String!
  summary: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
  author: User! @relationship(type: "WROTE_REVIEW", direction: IN)
  subject: Game! @relationship(type: "REVIEW_OF", direction: OUT)
}

interface ListEntry @relationshipProperties {
  status: Status
  hours: Int
  score: Int
}

enum Status {
  playing
  completed
  paused
  dropped
  planning
}

enum Genre {
  adventure
  board
  fighting
  horror
  racing
  rpg
  rhythm
  sandbox
  shooter
  simulation
  sports
  strategy
}

type Mutation {
  signUp(username: String!, email: String!, password: String!): String!
  signIn(email: String!, password: String!): String!
  updateUserDetails(
    username: String!
    newUsername: String
    newEmail: String
  ): String!
}

type Query {
  searchUsers(query: String): [User!]!
    @cypher(
      statement: "MATCH (n:User) WHERE toLower(n.username) CONTAINS toLower($query) RETURN n"
    )
  searchGames(query: String): [Game!]!
    @cypher(
      statement: "MATCH (n:Game) WHERE toLower(n.title) CONTAINS toLower($query) RETURN n"
    )
}

extend type Game
  @auth(rules: [{ operations: [CREATE, UPDATE], isAuthenticated: true }])

extend type User
  @auth(
    rules: [
      { operations: [UPDATE, CONNECT, DISCONNECT], allow: { id: "$jwt.sub" } }
    ]
  )

extend type Review
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE]
        allow: { author: { id: "$jwt.sub" } }
      }
    ]
  )
